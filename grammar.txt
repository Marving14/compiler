expr            :  KEYWORD:VAR IDENTIFIER EQ expr 
                : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	    : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      :  term ((PLUS1MINS) term) * 

term            : factor ((MUL|DIV) factor) *

factor          :  (PLUS|MINUS) factor 
                :  power 

power           :  call (POW factor)* 

call            : atom (LPARENT (expr (COMMA expr)*)? RPARENT)?



atom            :  INT|FLOAT|IDENTIFIER
                :  LPARENT expr RPARENT
                : if-expr
                : for-expr
                : while-expr
                : func-def


if-expr         : KEYWORD:IF expr KEYWORD:THEN expr
                : (KEYWORD:ELIF expr KEYWORD:THEN expr)*
                : (KEYWORD:ELSE expr) ? optional
       
while-expr	    : KEYWORD:WHILE expr KEYWORD:THEN expr
       
for-expr	    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
                : (KEYWORD:STEP expr)? KEYWORD:THEN expr ? optional      

Func-def        : KEYWORD:FUN IDENTIFIER? 
                : LPARENT (IDENTIFIER (COMMA IDENTIFIER)*)? RPARENT
                : ARROW expr

