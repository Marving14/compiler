statement       : NEWLINE* expr (NEWLINE+ expr)

expr            :  KEYWORD:VAR IDENTIFIER EQ expr 
                : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	    : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      :  term ((PLUS1MINS) term) * 

term            : factor ((MUL|DIV) factor) *

factor          :  (PLUS|MINUS) factor 
                :  power 

power           :  call (POW factor)* 

call            : atom (LPARENT (expr (COMMA expr)*)? RPARENT)?



atom            :  INT|FLOAT|IDENTIFIER
                :  LPARENT expr RPARENT
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def


list-expr       : LSQUARE  (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYWORD:IF expr KEYWORD:THEN
                (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b       : KEYWORD:ELIF expr KEYWORD:THEN
                (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c       : KEYWORD:ELSE
                expr
                | (NEWLINE statements KEYWORD:END)
       
while-expr	    : KEYWORD:WHILE expr KEYWORD:THEN 
                  expr
                | (NEWLINE statements KEYWORD:END)
       
for-expr	    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO 
                : (KEYWORD:STEP expr)? KEYWORD:THEN expr ? optional   
                  expr
                | (NEWLINE statements KEYWORD:END)   

Func-def        : KEYWORD:FUN IDENTIFIER? 
                : LPARENT (IDENTIFIER (COMMA IDENTIFIER)*)? RPARENT
                 (ARROW expr)
                | (NEWLINE statements KEYWORD:END)

